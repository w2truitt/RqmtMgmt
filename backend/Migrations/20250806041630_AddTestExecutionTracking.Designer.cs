// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(RqmtMgmtDbContext))]
    [Migration("20250806041630_AddTestExecutionTracking")]
    partial class AddTestExecutionTracking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("Entity", "EntityId")
                        .HasDatabaseName("IX_AuditLogs_Entity_EntityId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("backend.Models.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Requirements_CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentId");

                    b.HasIndex("Type", "Status")
                        .HasDatabaseName("IX_Requirements_Type_Status");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("backend.Models.RequirementLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FromRequirementId")
                        .HasColumnType("int");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToRequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromRequirementId");

                    b.HasIndex("ToRequirementId");

                    b.ToTable("RequirementLinks");
                });

            modelBuilder.Entity("backend.Models.RequirementTestCaseLink", b =>
                {
                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.HasKey("RequirementId", "TestCaseId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("RequirementTestCaseLinks");
                });

            modelBuilder.Entity("backend.Models.RequirementVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RequirementVersions");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("backend.Models.TestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuiteId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_TestCases_CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SuiteId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("backend.Models.TestCaseExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExecutedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.Property<int>("TestRunSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedAt")
                        .HasDatabaseName("IX_TestCaseExecutions_ExecutedAt");

                    b.HasIndex("ExecutedBy");

                    b.HasIndex("OverallResult")
                        .HasDatabaseName("IX_TestCaseExecutions_OverallResult");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestRunSessionId");

                    b.ToTable("TestCaseExecutions");
                });

            modelBuilder.Entity("backend.Models.TestCaseVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Steps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestCaseVersions");
                });

            modelBuilder.Entity("backend.Models.TestPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("TestPlans");
                });

            modelBuilder.Entity("backend.Models.TestPlanTestCase", b =>
                {
                    b.Property<int>("TestPlanId")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.HasKey("TestPlanId", "TestCaseId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestPlanTestCases");
                });

            modelBuilder.Entity("backend.Models.TestRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EvidenceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RunAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RunBy")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.Property<int?>("TestPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Result")
                        .HasDatabaseName("IX_TestRuns_Result");

                    b.HasIndex("RunAt")
                        .HasDatabaseName("IX_TestRuns_RunAt");

                    b.HasIndex("RunBy");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestPlanId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("backend.Models.TestRunSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TestPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedBy");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("IX_TestRunSessions_StartedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TestRunSessions_Status");

                    b.HasIndex("TestPlanId");

                    b.ToTable("TestRunSessions");
                });

            modelBuilder.Entity("backend.Models.TestStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestSteps");
                });

            modelBuilder.Entity("backend.Models.TestStepExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseExecutionId")
                        .HasColumnType("int");

                    b.Property<int>("TestStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseExecutionId");

                    b.HasIndex("TestStepId");

                    b.ToTable("TestStepExecutions");
                });

            modelBuilder.Entity("backend.Models.TestSuite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("TestSuites");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("backend.Models.AuditLog", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Requirement", b =>
                {
                    b.HasOne("backend.Models.User", "Creator")
                        .WithMany("RequirementsCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.Requirement", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("backend.Models.RequirementLink", b =>
                {
                    b.HasOne("backend.Models.Requirement", "FromRequirement")
                        .WithMany("OutgoingLinks")
                        .HasForeignKey("FromRequirementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.Requirement", "ToRequirement")
                        .WithMany("IncomingLinks")
                        .HasForeignKey("ToRequirementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromRequirement");

                    b.Navigation("ToRequirement");
                });

            modelBuilder.Entity("backend.Models.RequirementTestCaseLink", b =>
                {
                    b.HasOne("backend.Models.Requirement", null)
                        .WithMany("TestCaseLinks")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.TestCase", null)
                        .WithMany("RequirementLinks")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.TestCase", b =>
                {
                    b.HasOne("backend.Models.User", "Creator")
                        .WithMany("TestCasesCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.TestSuite", "Suite")
                        .WithMany("TestCases")
                        .HasForeignKey("SuiteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");

                    b.Navigation("Suite");
                });

            modelBuilder.Entity("backend.Models.TestCaseExecution", b =>
                {
                    b.HasOne("backend.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("backend.Models.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.TestRunSession", "TestRunSession")
                        .WithMany("TestCaseExecutions")
                        .HasForeignKey("TestRunSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("TestCase");

                    b.Navigation("TestRunSession");
                });

            modelBuilder.Entity("backend.Models.TestPlan", b =>
                {
                    b.HasOne("backend.Models.User", "Creator")
                        .WithMany("TestPlansCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("backend.Models.TestPlanTestCase", b =>
                {
                    b.HasOne("backend.Models.TestCase", null)
                        .WithMany("TestPlanLinks")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.TestPlan", null)
                        .WithMany("TestCaseLinks")
                        .HasForeignKey("TestPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.TestRun", b =>
                {
                    b.HasOne("backend.Models.User", "Runner")
                        .WithMany("TestRuns")
                        .HasForeignKey("RunBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.TestCase", "TestCase")
                        .WithMany("TestRuns")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.TestPlan", "TestPlan")
                        .WithMany()
                        .HasForeignKey("TestPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Runner");

                    b.Navigation("TestCase");

                    b.Navigation("TestPlan");
                });

            modelBuilder.Entity("backend.Models.TestRunSession", b =>
                {
                    b.HasOne("backend.Models.User", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.TestPlan", "TestPlan")
                        .WithMany()
                        .HasForeignKey("TestPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("TestPlan");
                });

            modelBuilder.Entity("backend.Models.TestStep", b =>
                {
                    b.HasOne("backend.Models.TestCase", "TestCase")
                        .WithMany("Steps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("backend.Models.TestStepExecution", b =>
                {
                    b.HasOne("backend.Models.TestCaseExecution", "TestCaseExecution")
                        .WithMany("TestStepExecutions")
                        .HasForeignKey("TestCaseExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.TestStep", "TestStep")
                        .WithMany()
                        .HasForeignKey("TestStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestCaseExecution");

                    b.Navigation("TestStep");
                });

            modelBuilder.Entity("backend.Models.TestSuite", b =>
                {
                    b.HasOne("backend.Models.User", "Creator")
                        .WithMany("TestSuitesCreated")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("backend.Models.UserRole", b =>
                {
                    b.HasOne("backend.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Requirement", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("IncomingLinks");

                    b.Navigation("OutgoingLinks");

                    b.Navigation("TestCaseLinks");
                });

            modelBuilder.Entity("backend.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("backend.Models.TestCase", b =>
                {
                    b.Navigation("RequirementLinks");

                    b.Navigation("Steps");

                    b.Navigation("TestPlanLinks");

                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("backend.Models.TestCaseExecution", b =>
                {
                    b.Navigation("TestStepExecutions");
                });

            modelBuilder.Entity("backend.Models.TestPlan", b =>
                {
                    b.Navigation("TestCaseLinks");
                });

            modelBuilder.Entity("backend.Models.TestRunSession", b =>
                {
                    b.Navigation("TestCaseExecutions");
                });

            modelBuilder.Entity("backend.Models.TestSuite", b =>
                {
                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("RequirementsCreated");

                    b.Navigation("TestCasesCreated");

                    b.Navigation("TestPlansCreated");

                    b.Navigation("TestRuns");

                    b.Navigation("TestSuitesCreated");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
