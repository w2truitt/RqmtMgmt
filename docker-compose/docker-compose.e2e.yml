services:
  frontend:
    image: mcr.microsoft.com/dotnet/sdk:9.0
    working_dir: /src
    volumes:
      - ../frontend:/src
    expose:
      - "5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
    command: ["dotnet", "run", "--urls", "http://0.0.0.0:5001"]
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    working_dir: /src
    volumes:
      - ../backend:/src
    expose:
      - "5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
      - ConnectionStrings__DefaultConnection=Server=db-test;Database=RqmtMgmtTest;User=sa;Password=Your_password123;TrustServerCertificate=True;
    command: ["dotnet", "run", "--urls", "http://0.0.0.0:5000", "--project", "/src/backend.csproj"]
    depends_on:
      db-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  db-test:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "Your_password123"
      ACCEPT_EULA: "Y"
      # Optimized for testing - smaller memory footprint
      MSSQL_MEMORY_LIMIT_MB: "1024"
      # Reduce checkpoint frequency for testing
      MSSQL_LOG_RETENTION: "1"
    ports:
      - "1434:1433"  # Different port to avoid conflicts
    volumes:
      - sqlvolume-test:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c '</dev/tcp/localhost/1433' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  sqlvolume-test:
