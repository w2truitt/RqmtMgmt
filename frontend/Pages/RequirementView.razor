@page "/projects/{ProjectId:int}/requirements/{RequirementId:int}"
@inject IRequirementService RequirementService
@inject IProjectService ProjectService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using frontend.Components.Navigation
@using RqmtMgmtShared

<PageTitle>@(requirement?.Title ?? "Loading...") - Requirements</PageTitle>

<div data-testid="requirement-view-page">
    <!-- Breadcrumb Navigation -->
    <ProjectBreadcrumb ProjectId="@ProjectId" 
                       ProjectName="@project?.Name" 
                       Section="Requirements"
                       SubSection="@requirement?.FullRequirementId" />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading requirement...</p>
        </div>
    }
    else if (requirement == null)
    {
        <div class="alert alert-warning" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Requirement not found.
        </div>
    }
    else
    {
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="mb-1">
                    @GetTypeIcon(requirement.Type) @requirement.Title
                </h2>
                <p class="text-muted mb-0">
                    <i class="bi bi-tag me-1"></i>
                    <strong>@requirement.FullRequirementId</strong>
                    <span class="ms-3">
                        @GetStatusBadge(requirement.Status)
                    </span>
                    <span class="ms-3">
                        <i class="bi bi-bookmark me-1"></i>@requirement.Type
                    </span>
                </p>
                <p class="text-muted mb-0">
                    <i class="bi bi-folder me-1"></i>
                    Project: <strong>@project?.Name (@project?.Code)</strong>
                </p>
            </div>
            <div>
                <button class="btn btn-outline-secondary me-2" @onclick="BackToRequirements">
                    <i class="bi bi-arrow-left me-1"></i>
                    Back to Requirements
                </button>
                <button class="btn btn-warning" @onclick="EditRequirement">
                    <i class="bi bi-pencil-square me-1"></i>
                    Edit
                </button>
            </div>
        </div>

        <!-- Requirement Details Card -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">
                    <i class="bi bi-file-earmark-text me-2"></i>
                    Requirement Details
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Main Content -->
                    <div class="col-md-8">
                        @if (!string.IsNullOrWhiteSpace(requirement.Description))
                        {
                            <div class="mb-4">
                                <h6 class="text-muted mb-2">Description</h6>
                                <div class="bg-light p-3 rounded" style="white-space: pre-wrap;">@requirement.Description</div>
                            </div>
                        }
                        else
                        {
                            <div class="mb-4">
                                <h6 class="text-muted mb-2">Description</h6>
                                <p class="text-muted fst-italic">No description provided.</p>
                            </div>
                        }
                    </div>

                    <!-- Metadata -->
                    <div class="col-md-4">
                        <div class="bg-light p-3 rounded">
                            <h6 class="text-primary mb-3">
                                <i class="bi bi-info-circle me-1"></i>
                                Metadata
                            </h6>
                            
                            <div class="mb-3">
                                <small class="text-muted d-block">Status</small>
                                @GetStatusBadge(requirement.Status)
                            </div>

                            <div class="mb-3">
                                <small class="text-muted d-block">Type</small>
                                <span class="badge bg-secondary">@requirement.Type</span>
                            </div>

                            <div class="mb-3">
                                <small class="text-muted d-block">Version</small>
                                <span class="badge bg-dark">v@requirement.Version</span>
                            </div>

                            @if (requirement.ParentId.HasValue && parentRequirement != null)
                            {
                                <div class="mb-3">
                                    <small class="text-muted d-block">Parent Requirement</small>
                                    <a href="/projects/@ProjectId/requirements/@requirement.ParentId" class="text-decoration-none">
                                        <small>@parentRequirement.FullRequirementId</small><br>
                                        <span class="text-primary">@parentRequirement.Title</span>
                                    </a>
                                </div>
                            }

                            <div class="mb-3">
                                <small class="text-muted d-block">Created</small>
                                <small>@requirement.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                            </div>

                            @if (requirement.UpdatedAt.HasValue)
                            {
                                <div class="mb-3">
                                    <small class="text-muted d-block">Last Updated</small>
                                    <small>@requirement.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm")</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Child Requirements -->
        @if (childRequirements?.Any() == true)
        {
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-diagram-3 me-2"></i>
                        Child Requirements (@childRequirements.Count)
                    </h5>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        @foreach (var child in childRequirements.OrderBy(r => r.FullRequirementId))
                        {
                            <div class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">
                                            <a href="/projects/@ProjectId/requirements/@child.Id" class="text-decoration-none">
                                                @child.FullRequirementId - @child.Title
                                            </a>
                                        </h6>
                                        <small class="text-muted">@child.Type</small>
                                    </div>
                                    @GetStatusBadge(child.Status)
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Version History -->
        @if (versions?.Any() == true)
        {
            <div class="card shadow-sm">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-clock-history me-2"></i>
                        Version History (@versions.Count)
                    </h5>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        @foreach (var version in versions.OrderByDescending(v => v.Version))
                        {
                            <div class="list-group-item @(version.Version == requirement.Version ? "list-group-item-primary" : "")">
                                <div class="d-flex w-100 justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">
                                            Version @version.Version
                                            @if (version.Version == requirement.Version)
                                            {
                                                <span class="badge bg-primary ms-2">Current</span>
                                            }
                                        </h6>
                                        <p class="mb-1">@version.Title</p>
                                        <small class="text-muted">Version @version.Version</small>
                                    </div>
                                    <small class="text-muted">@version.ModifiedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public int RequirementId { get; set; }

    private ProjectDto? project;
    private RequirementDto? requirement;
    private RequirementDto? parentRequirement;
    private List<RequirementDto>? childRequirements;
    private List<RequirementVersionDto>? versions;
    private string errorMessage = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load project and requirement information
            var projectTask = ProjectService.GetProjectByIdAsync(ProjectId);
            var requirementTask = RequirementService.GetByIdAsync(RequirementId);

            await Task.WhenAll(projectTask, requirementTask);

            project = await projectTask;
            requirement = await requirementTask;

            if (project == null)
            {
                errorMessage = "Project not found.";
                return;
            }

            if (requirement == null)
            {
                errorMessage = "Requirement not found.";
                return;
            }

            // Verify requirement belongs to the project
            if (requirement.ProjectId != ProjectId)
            {
                errorMessage = "Requirement does not belong to the specified project.";
                requirement = null;
                return;
            }

            // Load additional data
            await LoadAdditionalData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading requirement: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAdditionalData()
    {
        if (requirement == null) return;

        try
        {
            // Load parent requirement if exists
            if (requirement.ParentId.HasValue)
            {
                parentRequirement = await RequirementService.GetByIdAsync(requirement.ParentId.Value);
            }

            // TODO: Load child requirements
            // var allRequirements = await RequirementService.GetByProjectIdAsync(ProjectId);
            // childRequirements = allRequirements?.Where(r => r.ParentId == requirement.Id).ToList();
            childRequirements = new List<RequirementDto>();

            // Load version history
            versions = await RequirementService.GetVersionsAsync(requirement.Id);
        }
        catch (Exception ex)
        {
            // Don't set error message as this is additional data - just log or handle gracefully
            Console.WriteLine($"Error loading additional data: {ex.Message}");
        }
    }

    private void BackToRequirements()
    {
        Navigation.NavigateTo($"/projects/{ProjectId}/requirements");
    }

    private void EditRequirement()
    {
        Navigation.NavigateTo($"/projects/{ProjectId}/requirements/{RequirementId}/edit");
    }

    private string GetTypeIcon(RequirementType type)
    {
        return type switch
        {
            RequirementType.CRS => "📋",
            RequirementType.PRS => "📋",
            RequirementType.SRS => "⚙️",
            RequirementType.UserStory => "👤",
            RequirementType.BusinessRule => "⚖️",
            RequirementType.EntityName => "🏷️",
            _ => "📄"
        };
    }

    private RenderFragment GetStatusBadge(RequirementStatus status)
    {
        var (cssClass, text) = status switch
        {
            RequirementStatus.Draft => ("bg-secondary", "📝 Draft"),
            RequirementStatus.Approved => ("bg-success", "✅ Approved"),
            RequirementStatus.Implemented => ("bg-info", "🔧 Implemented"),
            RequirementStatus.Verified => ("bg-primary", "✔️ Verified"),
            _ => ("bg-dark", status.ToString())
        };

        return @<span class="badge @cssClass">@text</span>;
    }
}
