@page "/"
@inject IDashboardService DashboardService
@using RqmtMgmtShared

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

@if (isLoading)
{
    <div class="loading-spinner">
        <p>Loading dashboard data...</p>
    </div>
}
else
{
    <div class="dashboard-grid">
        <div class="dashboard-card">
            <h3>Requirements</h3>
            <div class="dashboard-card-content">
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@requirementsCount</span>
                    <span class="dashboard-stat-label">Total</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@approvedRequirements</span>
                    <span class="dashboard-stat-label">Approved</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@draftRequirements</span>
                    <span class="dashboard-stat-label">Draft</span>
                </div>
            </div>
            <div class="quick-actions">
                <a href="/requirements" class="quick-action-btn">View All</a>
                <a href="/requirements/new" class="quick-action-btn">Create New</a>
            </div>
        </div>

        <div class="dashboard-card">
            <h3>Test Suites</h3>
            <div class="dashboard-card-content">
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@testSuitesCount</span>
                    <span class="dashboard-stat-label">Total</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@activeTestSuites</span>
                    <span class="dashboard-stat-label">Active</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@completedTestSuites</span>
                    <span class="dashboard-stat-label">Completed</span>
                </div>
            </div>
            <div class="quick-actions">
                <a href="/testsuites" class="quick-action-btn">View All</a>
                <a href="/testsuites/new" class="quick-action-btn">Create New</a>
            </div>
        </div>

        <div class="dashboard-card">
            <h3>Test Cases</h3>
            <div class="dashboard-card-content">
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@testCasesCount</span>
                    <span class="dashboard-stat-label">Total</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@passedTests</span>
                    <span class="dashboard-stat-label">Passed</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@failedTests</span>
                    <span class="dashboard-stat-label">Failed</span>
                </div>
            </div>
            <div class="quick-actions">
                <a href="/testcases" class="quick-action-btn">View All</a>
                <a href="/testcases/new" class="quick-action-btn">Create New</a>
            </div>
        </div>

        <div class="dashboard-card">
            <h3>Test Plans</h3>
            <div class="dashboard-card-content">
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@testPlansCount</span>
                    <span class="dashboard-stat-label">Total</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@executionProgress</span>
                    <span class="dashboard-stat-label">% Complete</span>
                </div>
                <div class="dashboard-stat">
                    <span class="dashboard-stat-number">@coveragePercentage</span>
                    <span class="dashboard-stat-label">% Coverage</span>
                </div>
            </div>
            <div class="quick-actions">
                <a href="/testplans" class="quick-action-btn">View All</a>
                <a href="/testplans/new" class="quick-action-btn">Create New</a>
            </div>
        </div>
    </div>

    <div class="dashboard-secondary">
        <div class="dashboard-activity">
            <h4>Recent Activity</h4>
            @if (recentActivities.Any())
            {
                @foreach (var activity in recentActivities)
                {
                    <div class="activity-item">
                        <span class="activity-text">@activity.Description</span>
                        <span class="activity-time">@activity.TimeAgo</span>
                    </div>
                }
            }
            else
            {
                <p class="activity-text">No recent activity to display.</p>
            }
        </div>
    </div>
}

@if (hasError)
{
    <div class="error-message">
        <p>⚠️ Unable to load dashboard data. Please try refreshing the page.</p>
    </div>
}

@code {
    // Loading and error states
    private bool isLoading = true;
    private bool hasError = false;
    
    // Summary statistics
    private int requirementsCount = 0;
    private int approvedRequirements = 0;
    private int draftRequirements = 0;
    
    private int testSuitesCount = 0;
    private int activeTestSuites = 0;
    private int completedTestSuites = 0;
    
    private int testCasesCount = 0;
    private int passedTests = 0;
    private int failedTests = 0;
    
    private int testPlansCount = 0;
    private int executionProgress = 0;
    private int coveragePercentage = 0;
    
    // Recent activity
    private List<RecentActivityDto> recentActivities = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            // Load statistics and recent activity in parallel for better performance
            var statisticsTask = DashboardService.GetStatisticsAsync();
            var activitiesTask = DashboardService.GetRecentActivityAsync(5);

            await Task.WhenAll(statisticsTask, activitiesTask);

            var statistics = await statisticsTask;
            var activities = await activitiesTask;

            // Map statistics to component properties
            requirementsCount = statistics.Requirements.Total;
            approvedRequirements = statistics.Requirements.Approved;
            draftRequirements = statistics.Requirements.Draft;
            
            testSuitesCount = statistics.TestSuites.Total;
            activeTestSuites = statistics.TestSuites.Active;
            completedTestSuites = statistics.TestSuites.Completed;
            
            testCasesCount = statistics.TestCases.Total;
            passedTests = statistics.TestCases.Passed;
            failedTests = statistics.TestCases.Failed;
            
            testPlansCount = statistics.TestPlans.Total;
            executionProgress = statistics.TestPlans.ExecutionProgress;
            coveragePercentage = statistics.TestPlans.CoveragePercentage;
            
            // Set recent activities
            recentActivities = activities;
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}