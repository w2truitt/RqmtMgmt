@page "/projects/{projectId:int}/team"
@using RqmtMgmtShared
@inject IProjectService ProjectService
@inject IUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Team Management - @projectName</h3>

<div class="d-flex justify-content-between align-items-center mb-3">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/projects">Projects</a></li>
            <li class="breadcrumb-item"><a href="/projects/@ProjectId">@projectName</a></li>
            <li class="breadcrumb-item active">Team</li>
        </ol>
    </nav>
    <button class="btn btn-success" @onclick="ShowAddMemberForm" data-testid="add-team-member-button">
        <i class="fas fa-plus"></i> Add Team Member
    </button>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <p>Loading team members...</p>
    </div>
}
else if (teamMembers?.Any() == true)
{
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Team Members (@teamMembers.Count)</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Joined</th>
                            <th>Status</th>
                            <th width="120">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var member in teamMembers.OrderBy(m => m.UserName))
                        {
                            <tr class="@(member.IsActive ? "" : "table-secondary")" data-testid="team-member-row">>
                                <td>
                                    <strong>@member.UserName</strong>
                                    @if (member.Role == ProjectRole.ProjectOwner)
                                    {
                                        <span class="badge bg-primary ms-1">Owner</span>
                                    }
                                </td>
                                <td>@member.UserEmail</td>
                                <td>
                                    <span class="badge bg-@GetRoleBadgeColor(member.Role)" data-testid="member-role">
                                        @GetRoleDisplayName(member.Role)
                                    </span>
                                </td>
                                <td>@member.JoinedAt.ToString("MMM dd, yyyy")</td>
                                <td>
                                    @if (member.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" @onclick="() => ShowEditMemberForm(member)" title="Edit Role" data-testid="edit-@member.UserName">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        @if (member.Role != ProjectRole.ProjectOwner)
                                        {
                                            <button class="btn btn-outline-danger" @onclick="() => ConfirmRemoveMember(member)" title="Remove Member" data-testid="remove-@member.UserName">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i>
        No team members found for this project. Click "Add Team Member" to get started.
    </div>
}

@* Add/Edit Team Member Modal *@
@if (showMemberForm)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" data-testid="team-member-modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(editingMember == null ? "Add Team Member" : $"Edit {editingMember.UserName}")
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideMemberForm" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (editingMember == null)
                    {
                        <div class="mb-3">
                            <label class="form-label">Select User</label>
                            <select class="form-select" @bind="selectedUserId" data-testid="user-select">
                                <option value="">-- Select a user --</option>
                                @if (availableUsers != null)
                                {
                                    @foreach (var user in availableUsers)
                                    {
                                        <option value="@user.Id">@user.UserName (@user.Email)</option>
                                    }
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">User</label>
                            <p class="form-control-plaintext"><strong>@editingMember.UserName</strong> (@editingMember.UserEmail)</p>
                        </div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Project Role</label>
                        <select class="form-select" @bind="selectedRole" data-testid="role-select">
                            @foreach (ProjectRole role in Enum.GetValues<ProjectRole>())
                            {
                                @if (role != ProjectRole.ProjectOwner || (editingMember?.Role == ProjectRole.ProjectOwner))
                                {
                                    <option value="@role">@GetRoleDisplayName(role)</option>
                                }
                            }
                        </select>
                    </div>

                    @if (editingMember != null)
                    {
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="memberIsActive" id="memberActiveCheck">
                                <label class="form-check-label" for="memberActiveCheck">
                                    Active Member
                                </label>
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(memberFormError))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i> @memberFormError
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideMemberForm" data-testid="cancel-team-member-button">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveMember" disabled="@isSaving" data-testid="save-team-member-button">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        @(editingMember == null ? "Add Member" : "Update Member")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@* Confirmation Modal *@
@if (showConfirmModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Removal</h5>
                    <button type="button" class="btn-close" @onclick="HideConfirmModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove <strong>@memberToRemove?.UserName</strong> from this project?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideConfirmModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="RemoveMember" disabled="@isRemoving" data-testid="confirm-remove">
                        @if (isRemoving)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        Remove
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    [Parameter] public int ProjectId { get; set; }

    private List<ProjectTeamMemberDto>? teamMembers;
    private List<UserDto>? availableUsers;
    private string projectName = string.Empty;
    private bool isLoading = true;

    // Form state
    private bool showMemberForm = false;
    private bool showConfirmModal = false;
    private ProjectTeamMemberDto? editingMember = null;
    private ProjectTeamMemberDto? memberToRemove = null;
    private int selectedUserId = 0;
    private ProjectRole selectedRole = ProjectRole.Developer;
    private bool memberIsActive = true;
    private string memberFormError = string.Empty;
    private bool isSaving = false;
    private bool isRemoving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            // Load project info
            var project = await ProjectService.GetProjectByIdAsync(ProjectId);
            if (project == null)
            {
                Navigation.NavigateTo("/projects");
                return;
            }
            projectName = project.Name;

            // Load team members
            teamMembers = await ProjectService.GetProjectTeamMembersAsync(ProjectId);
            
            // Load all users for the dropdown
            availableUsers = await UserService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast or error message
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddMemberForm()
    {
        editingMember = null;
        selectedUserId = 0;
        selectedRole = ProjectRole.Developer;
        memberIsActive = true;
        memberFormError = string.Empty;
        showMemberForm = true;
    }

    private void ShowEditMemberForm(ProjectTeamMemberDto member)
    {
        editingMember = member;
        selectedUserId = member.UserId;
        selectedRole = member.Role;
        memberIsActive = member.IsActive;
        memberFormError = string.Empty;
        showMemberForm = true;
    }

    private void HideMemberForm()
    {
        showMemberForm = false;
        editingMember = null;
        memberFormError = string.Empty;
    }

    private async Task SaveMember()
    {
        if (isSaving) return;

        memberFormError = string.Empty;
        isSaving = true;

        try
        {
            if (editingMember == null)
            {
                // Adding new member
                if (selectedUserId == 0)
                {
                    memberFormError = "Please select a user.";
                    return;
                }

                // Check if user is already a team member
                if (teamMembers?.Any(m => m.UserId == selectedUserId) == true)
                {
                    memberFormError = "This user is already a team member.";
                    return;
                }

                var addDto = new AddProjectTeamMemberDto
                {
                    UserId = selectedUserId,
                    Role = selectedRole
                };

                var newMember = await ProjectService.AddTeamMemberAsync(ProjectId, addDto);
                if (newMember == null)
                {
                    memberFormError = "Failed to add team member. Please try again.";
                    return;
                }
            }
            else
            {
                // Updating existing member
                var updateDto = new UpdateProjectTeamMemberDto
                {
                    Role = selectedRole,
                    IsActive = memberIsActive
                };

                var updatedMember = await ProjectService.UpdateTeamMemberAsync(ProjectId, editingMember.UserId, updateDto);
                if (updatedMember == null)
                {
                    memberFormError = "Failed to update team member. Please try again.";
                    return;
                }
            }

            // Success - refresh data and close form
            await LoadData();
            HideMemberForm();
        }
        catch (Exception ex)
        {
            memberFormError = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ConfirmRemoveMember(ProjectTeamMemberDto member)
    {
        memberToRemove = member;
        showConfirmModal = true;
    }

    private void HideConfirmModal()
    {
        showConfirmModal = false;
        memberToRemove = null;
    }

    private async Task RemoveMember()
    {
        if (isRemoving || memberToRemove == null) return;

        isRemoving = true;

        try
        {
            var success = await ProjectService.RemoveTeamMemberAsync(ProjectId, memberToRemove.UserId);
            if (success)
            {
                await LoadData();
                HideConfirmModal();
            }
            else
            {
                // Handle error - you might want to show a toast
                Console.WriteLine("Failed to remove team member");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing team member: {ex.Message}");
        }
        finally
        {
            isRemoving = false;
            StateHasChanged();
        }
    }

    private string GetRoleDisplayName(ProjectRole role)
    {
        return role switch
        {
            ProjectRole.ProjectOwner => "Project Owner",
            ProjectRole.Developer => "Developer",
            ProjectRole.QAEngineer => "QA Engineer",
            ProjectRole.ScrumMaster => "Scrum Master",
            ProjectRole.BusinessAnalyst => "Business Analyst",
            ProjectRole.Stakeholder => "Stakeholder",
            _ => role.ToString()
        };
    }

    private string GetRoleBadgeColor(ProjectRole role)
    {
        return role switch
        {
            ProjectRole.ProjectOwner => "primary",
            ProjectRole.Developer => "success",
            ProjectRole.QAEngineer => "warning",
            ProjectRole.ScrumMaster => "info",
            ProjectRole.BusinessAnalyst => "secondary",
            ProjectRole.Stakeholder => "dark",
            _ => "light"
        };
    }
}
