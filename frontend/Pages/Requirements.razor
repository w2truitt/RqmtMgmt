@page "/requirements"
@using RqmtMgmtShared
@inject RqmtMgmtShared.IRequirementService ReqService

<PageTitle>Requirements</PageTitle>

<h1>Requirements</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (pagedResult == null)
{
    <p><em>Loading requirements...</em></p>
}
else
{
    @if (pagedResult.Items.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Status</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var req in pagedResult.Items)
                {
                    <tr>
                        <td>@req.Id</td>
                        <td>@req.Title</td>
                        <td>@req.Status</td>
                        <td>@req.Type</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center">
            <div>
                <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!pagedResult.HasPreviousPage)">Previous</button>
                <span class="mx-3">Page @pagedResult.PageNumber of @pagedResult.TotalPages</span>
                <button class="btn btn-primary" @onclick="NextPage" disabled="@(!pagedResult.HasNextPage)">Next</button>
            </div>
            <div class="text-muted">
                Showing @pagedResult.FirstItemIndex - @pagedResult.LastItemIndex of @pagedResult.TotalItems requirements
            </div>
        </div>
    }
    else
    {
        <p><em>No requirements found.</em></p>
    }
}

@code {
    private PagedResult<RequirementDto>? pagedResult;
    private PaginationParameters paginationParams = new() { PageNumber = 1, PageSize = 20 };
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            pagedResult = await ReqService.GetPagedAsync(paginationParams);
        }
        catch (Exception ex)
        {
            // In a real app, you'd use a proper logging framework
            Console.Error.WriteLine($"Error loading requirements: {ex.Message}");
            errorMessage = "Could not load requirements. Please try again later.";
        }
    }

    private async Task PreviousPage()
    {
        if (pagedResult?.HasPreviousPage == true)
        {
            paginationParams.PageNumber--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (pagedResult?.HasNextPage == true)
        {
            paginationParams.PageNumber++;
            await LoadData();
        }
    }
}