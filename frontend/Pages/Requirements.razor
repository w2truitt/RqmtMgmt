@page "/requirements"
<h3>Requirements</h3>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Status</th>
            <!-- <th>Owner</th> -->
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var req in requirements)
        {
            <tr>
                <td>@req.Id</td>
                <td>@req.Title</td>
                <td>@req.Status</td>
                <!-- <td>@req.Owner</td> -->
                <td>
                    <button class="btn btn-sm btn-primary" @onclick="() => EditRequirement(req)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteRequirement(req)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-success" @onclick="ShowAddForm">Add Requirement</button>

@if (showForm)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editRequirement == null ? "Add" : "Edit")) Requirement</h5>
                    <button type="button" class="close" @onclick="HideForm" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Title</label>
                        <input class="form-control" @bind="formModel.Title" />
                    </div>
                    <div class="form-group">
                        <label>Status</label>
                        <select class="form-control" @bind="formModel.Status">
                            <option>Draft</option>
                            <option>Approved</option>
                        </select>
                    </div>
                    <!-- Owner field removed -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="SaveRequirement">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideForm">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    // Updated for shared DTO and service usage
@using RqmtMgmtShared
@inject RequirementsDataService ReqService

List<RequirementDto> requirements = new();
RequirementDto formModel = new() { Type = "CRS", Title = string.Empty, Status = "Draft" };
RequirementDto? editRequirement = null;
bool showForm = false;

protected override async Task OnInitializedAsync()
{
    requirements = await ReqService.GetAllAsync();
}

async Task DeleteRequirement(RequirementDto req)
{
    if (await ReqService.DeleteAsync(req.Id))
        requirements = await ReqService.GetAllAsync();
}

void ShowAddForm()
{
    formModel = new RequirementDto { Type = "CRS", Title = string.Empty, Status = "Draft" };
    editRequirement = null;
    showForm = true;
}

void HideForm()
{
    showForm = false;
}

void EditRequirement(RequirementDto req)
{
    formModel = new RequirementDto
    {
        Id = req.Id,
        Type = req.Type,
        Title = req.Title,
        Description = req.Description,
        ParentId = req.ParentId,
        Status = req.Status,
        Version = req.Version,
        CreatedBy = req.CreatedBy,
        CreatedAt = req.CreatedAt,
        UpdatedAt = req.UpdatedAt
    };
    editRequirement = req;
    showForm = true;
}

async Task SaveRequirement()
{
    if (editRequirement != null)
    {
        await ReqService.UpdateAsync(formModel);
    }
    else
    {
        await ReqService.CreateAsync(formModel);
    }
    requirements = await ReqService.GetAllAsync();
    showForm = false;
}
}
