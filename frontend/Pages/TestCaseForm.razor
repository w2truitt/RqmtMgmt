@using RqmtMgmtShared
@inject ITestCaseService TestCaseService
@inject ITestSuiteService TestSuiteService

<EditForm Model="formModel" OnValidSubmit="SaveTestCase">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Title</label>
        <InputText class="form-control" @bind-Value="formModel.Title" placeholder="Title" />
    </div>
    <div class="form-group">
        <label>Description</label>
        <InputText class="form-control" @bind-Value="formModel.Description" placeholder="Description" />
    </div>
    <div class="form-group">
        <label>Test Suite</label>
        <select class="form-control" @bind="formModel.SuiteId">
            <option value="">-- Select Suite --</option>
            @if (testSuites != null)
            {
                foreach (var suite in testSuites)
                {
                    <option value="@suite.Id">@suite.Name</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label>Steps</label>
        @for (int i = 0; i < Steps.Count; i++)
        {
            var stepIndex = i; // Capture the index for the closure
            var descPlaceholder = $"Step {stepIndex + 1} Description";
            var expPlaceholder = $"Step {stepIndex + 1} Expected Result";
            <div class="input-group mb-2">
                <input class="form-control" 
                       value="@Steps[stepIndex].Description" 
                       @onchange="@((ChangeEventArgs e) => UpdateStepDescription(stepIndex, e.Value?.ToString() ?? string.Empty))"
                       placeholder="@descPlaceholder" />
                <input class="form-control" 
                       value="@Steps[stepIndex].ExpectedResult" 
                       @onchange="@((ChangeEventArgs e) => UpdateStepExpectedResult(stepIndex, e.Value?.ToString() ?? string.Empty))"
                       placeholder="@expPlaceholder" 
                       style="margin-left:5px;" />
                <div class="input-group-append">
                    <button type="button" class="btn btn-danger" @onclick="@(() => RemoveStep(stepIndex))">Remove</button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-secondary" @onclick="AddStep">Add Step</button>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancelled { get; set; }
    [Parameter] public TestCaseDto? EditModel { get; set; }

    TestCaseDto formModel = new() { Title = string.Empty };
    List<TestStepDto> Steps = new();
    List<TestSuiteDto>? testSuites;

    protected override async Task OnInitializedAsync()
    {
        testSuites = await TestSuiteService.GetAllAsync();
        if (EditModel != null)
        {
            formModel = new TestCaseDto
            {
                Id = EditModel.Id,
                Title = EditModel.Title,
                Description = EditModel.Description,
                SuiteId = EditModel.SuiteId,
                Steps = EditModel.Steps != null ? new List<TestStepDto>(EditModel.Steps) : new List<TestStepDto>()
            };
            Steps = EditModel.Steps != null ? new List<TestStepDto>(EditModel.Steps) : new List<TestStepDto>();
        }
    }

    void AddStep()
    {
        Steps.Add(new TestStepDto());
        StateHasChanged();
    }

    void RemoveStep(int idx)
    {
        if (idx >= 0 && idx < Steps.Count)
        {
            Steps.RemoveAt(idx);
            StateHasChanged();
        }
    }

    void UpdateStepDescription(int index, string value)
    {
        if (index >= 0 && index < Steps.Count)
        {
            Steps[index].Description = value;
        }
    }

    void UpdateStepExpectedResult(int index, string value)
    {
        if (index >= 0 && index < Steps.Count)
        {
            Steps[index].ExpectedResult = value;
        }
    }

    async Task SaveTestCase()
    {
        formModel.Steps = Steps;
        if (formModel.Id == 0)
            await TestCaseService.CreateAsync(formModel);
        else
            await TestCaseService.UpdateAsync(formModel);
        if (OnSaved.HasDelegate)
            await OnSaved.InvokeAsync();
    }

    void OnCancel()
    {
        if (OnCancelled.HasDelegate)
            OnCancelled.InvokeAsync();
    }
}