@page "/testsuites"
@using RqmtMgmtShared
@inject ITestSuiteService TestSuiteService
@inject IJSRuntime JSRuntime

<PageTitle>Test Suites</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">
                    <i class="fas fa-layer-group me-2"></i>Test Suites
                </h1>
                <button class="btn btn-success" @onclick="ShowAddForm" data-testid="create-testsuite-button">
                    <i class="fas fa-plus me-1"></i>Add Test Suite
                </button>
            </div>
        </div>
    </div>

    <!-- Search and Filter Controls -->
    <div class="row mb-3">
        <div class="col-md-8">
            <div class="input-group">
                                            <input type="text" class="form-control" placeholder="Search test suites..." 
                                   value="@searchTerm" @oninput="OnSearchTermChanged" data-testid="search-input" />
                                            <button type="button" class="btn btn-outline-secondary" @onclick="RefreshData">
                                <i class="fas fa-sync-alt me-1"></i>Refresh
                            </button>
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="btn btn-outline-secondary" @onclick="() => { searchTerm = string.Empty; ApplyFiltersAndSort(); }">
                        <i class="fas fa-times"></i>
                    </button>
                }
            </div>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="sortColumn" @bind:after="() => ApplyFiltersAndSort()">
                <option value="Name">Sort by Name</option>
                <option value="TestCaseCount">Sort by Test Case Count</option>
                <option value="CreatedAt">Sort by Created Date</option>
            </select>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading test suites...</p>
        </div>
    }
    else if (!filteredTestSuites.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">No Test Suites Found</h4>
            <p class="text-muted">
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <span>No test suites match your search criteria.</span>
                }
                else
                {
                    <span>Get started by creating your first test suite.</span>
                }
            </p>
            @if (string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn btn-primary" @onclick="ShowAddForm">
                    <i class="fas fa-plus me-1"></i>Create First Test Suite
                </button>
            }
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th scope="col" style="width: 80px;">ID</th>
                                <th scope="col">Name</th>
                                <th scope="col">Description</th>
                                <th scope="col" style="width: 120px;">Test Cases</th>
                                <th scope="col" style="width: 120px;">Created</th>
                                <th scope="col" style="width: 200px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var suite in filteredTestSuites)
                            {
                                <tr data-testid="testsuite-row">
                                    <td class="align-middle">
                                        <span class="badge bg-secondary">#@suite.Id</span>
                                    </td>
                                    <td class="align-middle">
                                        <div class="fw-medium">@suite.Name</div>
                                        @if (!string.IsNullOrEmpty(suite.ProjectName))
                                        {
                                            <small class="text-muted">Project: @suite.ProjectName</small>
                                        }
                                    </td>
                                    <td class="align-middle">
                                        @if (!string.IsNullOrEmpty(suite.Description))
                                        {
                                            <span class="text-truncate d-inline-block" style="max-width: 300px;" title="@suite.Description">
                                                @suite.Description
                                            </span>
                                        }
                                        else
                                        {
                                            <em class="text-muted">No description</em>
                                        }
                                    </td>
                                    <td class="align-middle text-center">
                                        <span class="badge @GetTestCaseCountBadgeClass(suite.TestCaseCount)">
                                            @suite.TestCaseCount
                                        </span>
                                    </td>
                                    <td class="align-middle">
                                        <small class="text-muted">@suite.CreatedAt.ToString("MMM dd, yyyy")</small>
                                    </td>
                                    <td class="align-middle">
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditForm(suite)" title="Edit" data-testid="edit-@suite.Name">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => NavigateToTestCases(suite)" title="View Test Cases" data-testid="view-@suite.Name">
                                                <i class="fas fa-list"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirm(suite)" title="Delete" data-testid="delete-@suite.Name">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer bg-light">
                <small class="text-muted">
                    Showing @filteredTestSuites.Count of @testSuites.Count test suites
                    @if (testSuites.Any())
                    {
                        <span class="ms-3">Total Test Cases: @testSuites.Sum(ts => ts.TestCaseCount)</span>
                    }
                </small>
            </div>
        </div>
    }
</div>

<!-- Add/Edit Test Suite Modal -->
@if (showForm)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas @(editTestSuite == null ? "fa-plus" : "fa-edit") me-2"></i>
                        @(editTestSuite == null ? "Add New Test Suite" : "Edit Test Suite")
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideForm" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(formErrorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>@formErrorMessage
                        </div>
                    }
                    
                    <form @onsubmit="SaveTestSuite" @onsubmit:preventDefault="true">
                        <div class="mb-3">
                            <label for="suiteName" class="form-label">Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="suiteName" @bind="formModel.Name" 
                                   placeholder="Enter test suite name" required maxlength="200" data-testid="name-input" />
                            <div class="form-text">Maximum 200 characters</div>
                        </div>

                        <div class="mb-3">
                            <label for="suiteDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="suiteDescription" @bind="formModel.Description" 
                                      rows="4" placeholder="Enter a detailed description of this test suite" maxlength="1000" data-testid="description-input"></textarea>
                            <div class="form-text">Maximum 1000 characters (Optional)</div>
                        </div>

                        @if (editTestSuite != null)
                        {
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Test Cases</label>
                                        <div class="form-control-plaintext">
                                            <span class="badge bg-info">@editTestSuite.TestCaseCount test cases</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Created</label>
                                        <div class="form-control-plaintext">@editTestSuite.CreatedAt.ToString("MMM dd, yyyy HH:mm")</div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Created By</label>
                                        <div class="form-control-plaintext">User #@editTestSuite.CreatedBy</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideForm">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTestSuite" disabled="@isProcessing" data-testid="save-button">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas fa-save me-1"></i>
                        }
                        @(editTestSuite == null ? "Create Test Suite" : "Update Test Suite")
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirm && testSuiteToDelete != null)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the test suite "<strong>@testSuiteToDelete.Name</strong>"?</p>
                    @if (testSuiteToDelete.TestCaseCount > 0)
                    {
                        <div class="alert alert-warning">
                            <i class="fas fa-warning me-2"></i>
                            <strong>Warning:</strong> This test suite contains <strong>@testSuiteToDelete.TestCaseCount test case(s)</strong>. 
                            Deleting this suite may affect those test cases.
                        </div>
                    }
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>This action cannot be undone.</strong>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed" disabled="@isProcessing" data-testid="confirm-delete">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas fa-trash me-1"></i>
                        }
                        Delete Test Suite
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    // Data and form model
    private List<TestSuiteDto> testSuites = new();
    private List<TestSuiteDto> filteredTestSuites = new();
    private TestSuiteDto formModel = new() { Name = string.Empty };
    private TestSuiteDto? editTestSuite = null;
    private TestSuiteDto? testSuiteToDelete = null;

    // UI state
    private bool showForm = false;
    private bool showDeleteConfirm = false;
    private bool isLoading = true;
    private bool isProcessing = false;
    private string errorMessage = string.Empty;
    private string formErrorMessage = string.Empty;

    // Search and filter state
    private string searchTerm = string.Empty;
    private string sortColumn = "Name";
    private bool sortDescending = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestSuites();
    }

    private async Task LoadTestSuites()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            testSuites = await TestSuiteService.GetAllAsync();
            ApplyFiltersAndSort();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load test suites: {ex.Message}";
            Console.WriteLine($"Error loading test suites: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFiltersAndSort()
    {
        var filtered = testSuites.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var search = searchTerm.ToLowerInvariant();
            filtered = filtered.Where(ts => 
                (ts.Name?.ToLowerInvariant().Contains(search) ?? false) ||
                (ts.Description?.ToLowerInvariant().Contains(search) ?? false) ||
                (ts.ProjectName?.ToLowerInvariant().Contains(search) ?? false));
        }

        // Apply sorting
        filtered = sortColumn switch
        {
            "Name" => sortDescending ? filtered.OrderByDescending(ts => ts.Name) : filtered.OrderBy(ts => ts.Name),
            "Description" => sortDescending ? filtered.OrderByDescending(ts => ts.Description) : filtered.OrderBy(ts => ts.Description),
            "ProjectName" => sortDescending ? filtered.OrderByDescending(ts => ts.ProjectName) : filtered.OrderBy(ts => ts.ProjectName),
            "TestCaseCount" => sortDescending ? filtered.OrderByDescending(ts => ts.TestCaseCount) : filtered.OrderBy(ts => ts.TestCaseCount),
            "CreatedAt" => sortDescending ? filtered.OrderByDescending(ts => ts.CreatedAt) : filtered.OrderBy(ts => ts.CreatedAt),
            _ => filtered.OrderBy(ts => ts.Name)
        };

        filteredTestSuites = filtered.ToList();
        StateHasChanged();
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFiltersAndSort();
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortDescending = !sortDescending;
        }
        else
        {
            sortColumn = column;
            sortDescending = false;
        }
        ApplyFiltersAndSort();
    }

    private string GetSortIcon(string column)
    {
        if (sortColumn != column) return "fas fa-sort text-muted";
        return sortDescending ? "fas fa-sort-down text-primary" : "fas fa-sort-up text-primary";
    }

    private void ShowAddForm()
    {
        editTestSuite = null;
        formModel = new TestSuiteDto() 
        { 
            Name = string.Empty,
            ProjectId = 1,
            CreatedBy = 1,
            CreatedAt = DateTime.UtcNow
        };
        formErrorMessage = string.Empty;
        showForm = true;
    }

    private void ShowEditForm(TestSuiteDto testSuite)
    {
        editTestSuite = testSuite;
        formModel = new TestSuiteDto
        {
            Id = testSuite.Id,
            Name = testSuite.Name,
            Description = testSuite.Description,
            ProjectId = testSuite.ProjectId,
            CreatedBy = testSuite.CreatedBy,
            CreatedAt = testSuite.CreatedAt
        };
        formErrorMessage = string.Empty;
        showForm = true;
    }

    private void HideForm()
    {
        showForm = false;
        editTestSuite = null;
        formModel = new TestSuiteDto() { Name = string.Empty };
        formErrorMessage = string.Empty;
    }

    private async Task SaveTestSuite()
    {
        if (string.IsNullOrWhiteSpace(formModel.Name))
        {
            formErrorMessage = "Test suite name is required.";
            return;
        }

        if (formModel.Name.Length > 200)
        {
            formErrorMessage = "Test suite name cannot exceed 200 characters.";
            return;
        }

        if (!string.IsNullOrEmpty(formModel.Description) && formModel.Description.Length > 1000)
        {
            formErrorMessage = "Description cannot exceed 1000 characters.";
            return;
        }

        try
        {
            isProcessing = true;
            formErrorMessage = string.Empty;

            if (editTestSuite == null)
            {
                await TestSuiteService.CreateAsync(formModel);
            }
            else
            {
                await TestSuiteService.UpdateAsync(formModel);
            }

            HideForm();
            await LoadTestSuites();
        }
        catch (Exception ex)
        {
            formErrorMessage = $"Failed to save test suite: {ex.Message}";
            Console.WriteLine($"Error saving test suite: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ShowDeleteConfirm(TestSuiteDto testSuite)
    {
        testSuiteToDelete = testSuite;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        testSuiteToDelete = null;
        showDeleteConfirm = false;
    }

    private async Task DeleteConfirmed()
    {
        if (testSuiteToDelete == null) return;

        try
        {
            isProcessing = true;
            await TestSuiteService.DeleteAsync(testSuiteToDelete.Id);
            CancelDelete();
            await LoadTestSuites();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete test suite: {ex.Message}";
            Console.WriteLine($"Error deleting test suite: {ex}");
            CancelDelete();
        }
        finally
        {
            isProcessing = false;
        }
    }

    private string GetProjectBadgeClass()
    {
        return "bg-secondary";
    }

    private string GetTestCaseCountBadgeClass(int count)
    {
        return count switch
        {
            0 => "bg-warning",
            <= 5 => "bg-info",
            <= 20 => "bg-success",
            _ => "bg-primary"
        };
    }

    private async Task RefreshData()
    {
        await LoadTestSuites();
    }

    private void NavigateToTestCases(TestSuiteDto testSuite)
    {
        // TODO: Navigate to test cases page for this test suite
        // This could navigate to /testcases/{testSuite.Id} or similar
        Console.WriteLine($"Navigate to test cases for test suite: {testSuite.Name}");
    }
}