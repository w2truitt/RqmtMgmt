@page "/projects/{ProjectId:int}/requirements"
@inject IRequirementService RequirementService
@inject IProjectService ProjectService
@inject IProjectContextService ProjectContextService
@inject NavigationManager Navigation
@using frontend.Components.Navigation
@using RqmtMgmtShared

<PageTitle>Requirements - @(project?.Name ?? "Loading...")</PageTitle>

<div data-testid="requirements-page">
<!-- Breadcrumb Navigation -->
<ProjectBreadcrumb ProjectId="@ProjectId" 
                   ProjectName="@project?.Name" 
                   Section="Requirements" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
    </div>
}

@if (project == null)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading project...</p>
    </div>
}
else
{
    <!-- Project Context Header -->
    <div class="project-context-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="mb-1">Requirements</h2>
                <p class="text-muted mb-0">
                    <i class="bi bi-folder me-1"></i>
                    Project: <strong>@project.Name (@project.Code)</strong>
                    @if (pagedResult != null)
                    {
                        <span class="ms-3">
                            <i class="bi bi-file-earmark-text me-1"></i>
                            @pagedResult.TotalItems requirement@(pagedResult.TotalItems != 1 ? "s" : "")
                        </span>
                    }
                </p>
            </div>
            <div>
                <button class="btn btn-primary" @onclick="CreateNewRequirement">
                    <i class="bi bi-plus-circle me-1"></i>New Requirement
                </button>
                <a href="/projects/@ProjectId" class="btn btn-outline-secondary ms-2">
                    <i class="bi bi-arrow-left me-1"></i>Back to Project
                </a>
            </div>
        </div>
    </div>

    <!-- Search and Filter Controls -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search requirements..." 
                       @bind="searchTerm" @bind:after="SearchRequirements" />
                <button class="btn btn-outline-secondary" @onclick="SearchRequirements">
                    <i class="fas fa-search"></i>
                </button>
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <i class="fas fa-times"></i>
                    </button>
                }
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filterType" @bind:after="FilterRequirements">
                <option value="">All Types</option>
                <option value="Functional">Functional</option>
                <option value="NonFunctional">Non-Functional</option>
                <option value="BusinessRule">Business Rule</option>
                <option value="Constraint">Constraint</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="sortBy" @bind:after="SortRequirements">
                <option value="id">Sort by ID</option>
                <option value="title">Sort by Title</option>
                <option value="type">Sort by Type</option>
                <option value="status">Sort by Status</option>
                <option value="created">Sort by Created Date</option>
            </select>
        </div>
    </div>

    @if (pagedResult == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading requirements...</p>
        </div>
    }
    else if (!pagedResult.Items.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-file-earmark-text fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No Requirements Found</h5>
            <p class="text-muted mb-0">
                @if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(filterType))
                {
                    <span>No requirements match your current filters for this project.</span>
                }
                else
                {
                    <span>This project doesn't have any requirements yet. Get started by creating your first requirement.</span>
                }
            </p>
            <button class="btn btn-primary mt-3" @onclick="CreateNewRequirement">
                <i class="bi bi-plus-circle me-1"></i>Create First Requirement
            </button>
        </div>
    }
    else
    {
        <!-- Requirements Table -->
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th scope="col" style="width: 80px;">ID</th>
                                <th scope="col">Title</th>
                                <th scope="col" style="width: 120px;">Type</th>
                                <th scope="col" style="width: 120px;">Status</th>
                                <th scope="col" style="width: 150px;">Created</th>
                                <th scope="col" style="width: 200px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var requirement in pagedResult.Items)
                            {
                                <tr data-testid="requirement-row">
                                    <td class="align-middle">
                                        <span class="fw-medium text-primary">@requirement.Id</span>
                                    </td>
                                    <td class="align-middle">
                                        <div class="fw-medium">@requirement.Title</div>
                                        @if (!string.IsNullOrEmpty(requirement.Description))
                                        {
                                            <small class="text-muted">@(requirement.Description.Length > 100 ? requirement.Description.Substring(0, 100) + "..." : requirement.Description)</small>
                                        }
                                    </td>
                                    <td class="align-middle">
                                        <span class="badge @GetTypeBadgeClass(requirement.Type.ToString())">
                                            @requirement.Type
                                        </span>
                                    </td>
                                    <td class="align-middle">
                                        <span class="badge @GetStatusBadgeClass(requirement.Status.ToString())">
                                            @requirement.Status
                                        </span>
                                    </td>
                                    <td class="align-middle">
                                        <small class="text-muted">@requirement.CreatedAt.ToString("MMM dd, yyyy")</small>
                                    </td>
                                    <td class="align-middle">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary" 
                                                    @onclick="() => ViewRequirement(requirement.Id)"
                                                    data-testid="view-button">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-secondary" 
                                                    @onclick="() => EditRequirement(requirement.Id)"
                                                    data-testid="edit-button">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" 
                                                    @onclick="() => ConfirmDeleteRequirement(requirement)"
                                                    data-testid="delete-button">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        @if (pagedResult.TotalPages > 1)
        {
            <nav aria-label="Requirements pagination" class="mt-3">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(pagedResult.PageNumber == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pagedResult.PageNumber - 1)">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                    </li>
                    
                    @for (int i = Math.Max(1, pagedResult.PageNumber - 2); i <= Math.Min(pagedResult.TotalPages, pagedResult.PageNumber + 2); i++)
                    {
                        <li class="page-item @(i == pagedResult.PageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                        </li>
                    }
                    
                    <li class="page-item @(pagedResult.PageNumber == pagedResult.TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pagedResult.PageNumber + 1)">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        }
    }
}

@code {
    [Parameter] public int ProjectId { get; set; }
    
    private ProjectDto? project;
    private PagedResult<RequirementDto>? pagedResult;
    private string? errorMessage;
    private string searchTerm = string.Empty;
    private string filterType = string.Empty;
    private string sortBy = "id";
    private int currentPage = 1;
    private const int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectAndRequirements();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Update project context when route parameter changes
        if (project?.Id != ProjectId)
        {
            await LoadProjectAndRequirements();
        }
    }

    private async Task LoadProjectAndRequirements()
    {
        try
        {
            // Load project details first
            var project = await ProjectService.GetProjectByIdAsync(ProjectId);
            if (project != null)
            {
                this.project = project;
                await ProjectContextService.SetCurrentProjectAsync(project);
                
                // Load requirements for this project
                await LoadRequirements();
            }
            else
            {
                errorMessage = "Failed to load project";
                Navigation.NavigateTo("/projects");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading project: {ex.Message}";
            Console.WriteLine($"Error loading project {ProjectId}: {ex}");
        }
    }

    private async Task LoadRequirements()
    {
        try
        {
            var request = new PaginationParameters
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SearchTerm = searchTerm,
                SortBy = sortBy,
                ProjectId = ProjectId // Filter by project
            };

            // Apply type filter if selected
            if (!string.IsNullOrEmpty(filterType))
            {
                // This would need to be implemented in the API
                // For now, we'll filter client-side after getting results
            }

            var result = await RequirementService.GetPagedAsync(request);
            if (result != null)
            {
                pagedResult = result;
                
                // Apply client-side type filter if needed
                if (!string.IsNullOrEmpty(filterType))
                {
                    var filteredItems = pagedResult.Items.Where(r => r.Type.ToString().Equals(filterType, StringComparison.OrdinalIgnoreCase)).ToList();
                    pagedResult = new PagedResult<RequirementDto>
                    {
                        Items = filteredItems,
                        TotalItems = filteredItems.Count,
                        PageNumber = 1,
                        PageSize = pageSize
                    };
                }
            }
            else
            {
                errorMessage = "Failed to load requirements";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading requirements: {ex.Message}";
            Console.WriteLine($"Error loading requirements for project {ProjectId}: {ex}");
        }
    }

    private async Task SearchRequirements()
    {
        currentPage = 1;
        await LoadRequirements();
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        currentPage = 1;
        await LoadRequirements();
    }

    private async Task FilterRequirements()
    {
        currentPage = 1;
        await LoadRequirements();
    }

    private async Task SortRequirements()
    {
        currentPage = 1;
        await LoadRequirements();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= (pagedResult?.TotalPages ?? 1))
        {
            currentPage = page;
            await LoadRequirements();
        }
    }

    private void CreateNewRequirement()
    {
        Navigation.NavigateTo($"/projects/{ProjectId}/requirements/new");
    }

    private void ViewRequirement(int requirementId)
    {
        Navigation.NavigateTo($"/projects/{ProjectId}/requirements/{requirementId}");
    }

    private void EditRequirement(int requirementId)
    {
        Navigation.NavigateTo($"/projects/{ProjectId}/requirements/{requirementId}/edit");
    }

    private void ConfirmDeleteRequirement(RequirementDto requirement)
    {
        // TODO: Implement delete confirmation modal
        Console.WriteLine($"Delete requirement {requirement.Id}: {requirement.Title}");
    }

    private string GetTypeBadgeClass(string type)
    {
        return type.ToLower() switch
        {
            "functional" => "bg-primary",
            "nonfunctional" => "bg-info",
            "businessrule" => "bg-success",
            "constraint" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "draft" => "bg-secondary",
            "inreview" => "bg-warning text-dark",
            "approved" => "bg-success",
            "implemented" => "bg-primary",
            "tested" => "bg-info",
            "deprecated" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}

<style>
.project-context-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 1.5rem;
    border-radius: 0.5rem;
    border-left: 4px solid var(--bs-primary);
}

.btn-group-sm .btn {
    padding: 0.25rem 0.4rem;
}

.table > :not(caption) > * > * {
    padding: 0.75rem 0.5rem;
}

.page-link {
    border: none;
    color: var(--bs-primary);
}

.page-link:hover {
    background-color: var(--bs-light);
    color: var(--bs-primary);
}

.page-item.active .page-link {
    background-color: var(--bs-primary);
    border-color: var(--bs-primary);
}
</style>
</div>
